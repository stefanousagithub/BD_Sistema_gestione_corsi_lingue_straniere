-- MySQL Script generated by MySQL Workbench
-- lun 31 ago 2020 10:12:18 CEST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering
set @@session.explicit_defaults_for_timestamp=on;
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema gestione-corsi
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `gestione-corsi` ;

-- -----------------------------------------------------
-- Schema gestione-corsi
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `gestione-corsi` ;
-- -----------------------------------------------------
-- Schema new_schema1
-- -----------------------------------------------------
USE `gestione-corsi` ;

-- -----------------------------------------------------
-- Table `gestione-corsi`.`livello`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`livello` ;

CREATE TABLE IF NOT EXISTS `gestione-corsi`.`livello` (
  `nome` VARCHAR(45) NOT NULL,
  `libro` VARCHAR(45) NOT NULL,
  `esame` TINYINT NULL,
  PRIMARY KEY (`nome`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gestione-corsi`.`corso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`corso` ;

CREATE TABLE IF NOT EXISTS `gestione-corsi`.`corso` (
  `codice` INT NOT NULL AUTO_INCREMENT,
  `livello` VARCHAR(45) NOT NULL,
  `attivazione` DATE NOT NULL,
  PRIMARY KEY (`codice`, `livello`),
  INDEX `fk_corso_livello_idx` (`livello` ASC),
  CONSTRAINT `fk_corso_livello`
    FOREIGN KEY (`livello`)
    REFERENCES `gestione-corsi`.`livello` (`nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gestione-corsi`.`lezione`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`lezione` ;

CREATE TABLE IF NOT EXISTS `gestione-corsi`.`lezione` (
  `codicecorso` INT NOT NULL,
  `livellocorso` VARCHAR(45) NOT NULL,
  `numero` INT NOT NULL AUTO_INCREMENT,
  `inizio` TIMESTAMP NOT NULL,
  `fine` TIMESTAMP NOT NULL,
  PRIMARY KEY (`numero`, `codicecorso`, `livellocorso`),
  INDEX `fk_lezione_corso_idx` (`codicecorso` ASC, `livellocorso` ASC),
  CONSTRAINT `fk_lezione_corso`
    FOREIGN KEY (`codicecorso` , `livellocorso`)
    REFERENCES `gestione-corsi`.`corso` (`codice` , `livello`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gestione-corsi`.`utente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`utente` ;

CREATE TABLE IF NOT EXISTS `gestione-corsi`.`utente` (
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  `ruolo` ENUM('amministratore', 'allievo', 'insegnante', 'segreteria') NOT NULL,
  PRIMARY KEY (`username`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gestione-corsi`.`allievo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`allievo` ;

CREATE TABLE IF NOT EXISTS `gestione-corsi`.`allievo` (
  `matricola` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(45) NOT NULL,
  `nome` VARCHAR(45) NOT NULL,
  `cognome` VARCHAR(45) NOT NULL,
  `telefono` BIGINT NULL,
  `datanascita` DATE NULL,
  `indirizzo` VARCHAR(45) NULL,
  PRIMARY KEY (`matricola`),
  INDEX `fk_allievo_utente_idx` (`username` ASC),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC),
  CONSTRAINT `fk_allievo_utente`
    FOREIGN KEY (`username`)
    REFERENCES `gestione-corsi`.`utente` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gestione-corsi`.`assenza`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`assenza` ;

CREATE TABLE IF NOT EXISTS `gestione-corsi`.`assenza` (
  `codicecorso` INT NOT NULL,
  `livellocorso` VARCHAR(45) NOT NULL,
  `numerolezione` INT NOT NULL,
  `allievo` INT NOT NULL,
  PRIMARY KEY (`codicecorso`, `allievo`, `livellocorso`, `numerolezione`),
  INDEX `fk_assenza_allievo_idx` (`allievo` ASC),
  INDEX `fk_assenza_lezione_idx` (`codicecorso` ASC, `livellocorso` ASC, `numerolezione` ASC),
  CONSTRAINT `fk_assenza_lezione`
    FOREIGN KEY (`codicecorso` , `livellocorso` , `numerolezione`)
    REFERENCES `gestione-corsi`.`lezione` (`codicecorso` , `livellocorso` , `numero`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_assenza_allievo`
    FOREIGN KEY (`allievo`)
    REFERENCES `gestione-corsi`.`allievo` (`matricola`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gestione-corsi`.`insegnante`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`insegnante` ;

CREATE TABLE IF NOT EXISTS `gestione-corsi`.`insegnante` (
  `codice` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(45) NOT NULL,
  `nome` VARCHAR(45) NOT NULL,
  `indirizzo` VARCHAR(45) NULL,
  `nazionalita` VARCHAR(45) NULL,
  PRIMARY KEY (`codice`),
  INDEX `ff_insegnante_utente_idx` (`username` ASC),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC),
  CONSTRAINT `ff_insegnante_utente`
    FOREIGN KEY (`username`)
    REFERENCES `gestione-corsi`.`utente` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gestione-corsi`.`docenza`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`docenza` ;

CREATE TABLE IF NOT EXISTS `gestione-corsi`.`docenza` (
  `codicecorso` INT NOT NULL,
  `livellocorso` VARCHAR(45) NOT NULL,
  `numerolezione` INT NOT NULL,
  `insegnante` INT NOT NULL,
  PRIMARY KEY (`codicecorso`, `insegnante`, `livellocorso`, `numerolezione`),
  INDEX `fk_docenza_insegnante_idx` (`insegnante` ASC),
  INDEX `fk_docenza_lezione_idx` (`codicecorso` ASC, `livellocorso` ASC, `numerolezione` ASC),
  CONSTRAINT `fk_docenza_lezione`
    FOREIGN KEY (`codicecorso` , `livellocorso` , `numerolezione`)
    REFERENCES `gestione-corsi`.`lezione` (`codicecorso` , `livellocorso` , `numero`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_docenza_insegnante`
    FOREIGN KEY (`insegnante`)
    REFERENCES `gestione-corsi`.`insegnante` (`codice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gestione-corsi`.`iscrizione`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`iscrizione` ;

CREATE TABLE IF NOT EXISTS `gestione-corsi`.`iscrizione` (
  `codicecorso` INT NOT NULL,
  `livellocorso` VARCHAR(45) NOT NULL,
  `allievo` INT NOT NULL,
  `iscrizione` DATE NOT NULL,
  PRIMARY KEY (`codicecorso`, `livellocorso`, `allievo`),
  INDEX `fk_iscrizione_allievo_idx` (`allievo` ASC),
  CONSTRAINT `fk_iscrizione_corso`
    FOREIGN KEY (`codicecorso` , `livellocorso`)
    REFERENCES `gestione-corsi`.`corso` (`codice` , `livello`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_iscrizione_allievo`
    FOREIGN KEY (`allievo`)
    REFERENCES `gestione-corsi`.`allievo` (`matricola`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gestione-corsi`.`lezioneprivata`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`lezioneprivata` ;

CREATE TABLE IF NOT EXISTS `gestione-corsi`.`lezioneprivata` (
  `codice` INT NOT NULL AUTO_INCREMENT,
  `inizio` TIMESTAMP NOT NULL,
  `fine` TIMESTAMP NOT NULL,
  `insegnante` INT NOT NULL,
  `allievo` INT NOT NULL,
  PRIMARY KEY (`codice`),
  INDEX `fk_lezioneprivata_insegnante_idx` (`insegnante` ASC),
  INDEX `fk_lezioneprivata_allievo_idx` (`allievo` ASC),
  CONSTRAINT `fk_lezioneprivata_insegnante`
    FOREIGN KEY (`insegnante`)
    REFERENCES `gestione-corsi`.`insegnante` (`codice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lezioneprivata_allievo`
    FOREIGN KEY (`allievo`)
    REFERENCES `gestione-corsi`.`allievo` (`matricola`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gestione-corsi`.`attivita`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`attivita` ;

CREATE TABLE IF NOT EXISTS `gestione-corsi`.`attivita` (
  `codice` INT NOT NULL AUTO_INCREMENT,
  `inizio` TIMESTAMP NOT NULL,
  `fine` TIMESTAMP NOT NULL,
  `tipo` INT NOT NULL,
  `regista` VARCHAR(45) NULL,
  `film` VARCHAR(45) NULL,
  `argomento` VARCHAR(45) NULL,
  `conferenziere` VARCHAR(45) NULL,
  PRIMARY KEY (`codice`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gestione-corsi`.`partecipazione`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`partecipazione` ;

CREATE TABLE IF NOT EXISTS `gestione-corsi`.`partecipazione` (
  `allievo` INT NOT NULL,
  `attivita` INT NOT NULL,
  PRIMARY KEY (`allievo`, `attivita`),
  INDEX `fk_partecipazione_attivita_idx` (`attivita` ASC),
  CONSTRAINT `fk_partecipazione_allievo`
    FOREIGN KEY (`allievo`)
    REFERENCES `gestione-corsi`.`allievo` (`matricola`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_partecipazione_attivita`
    FOREIGN KEY (`attivita`)
    REFERENCES `gestione-corsi`.`attivita` (`codice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `gestione-corsi` ;

-- -----------------------------------------------------
-- Placeholder table for view `gestione-corsi`.`report_lezioni_settimanale`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestione-corsi`.`report_lezioni_settimanale` (`insegnante` INT, `anno` INT, `settimana` INT, `tipo` INT, `corso` INT, `livello` INT, `lezione` INT, `allievo` INT, `inizio` INT, `fine` INT);

-- -----------------------------------------------------
-- Placeholder table for view `gestione-corsi`.`report_lezioniprivate_settimanale`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestione-corsi`.`report_lezioniprivate_settimanale` (`insegnante` INT, `anno` INT, `settimana` INT, `tipo` INT, `corso` INT, `livello` INT, `lezione` INT, `allievo` INT, `inizio` INT, `fine` INT);

-- -----------------------------------------------------
-- Placeholder table for view `gestione-corsi`.`report_lezioni_mensile`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestione-corsi`.`report_lezioni_mensile` (`insegnante` INT, `anno` INT, `mese` INT, `tipo` INT, `corso` INT, `livello` INT, `lezione` INT, `allievo` INT, `inizio` INT, `fine` INT);

-- -----------------------------------------------------
-- Placeholder table for view `gestione-corsi`.`report_lezioniprivate_mensile`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestione-corsi`.`report_lezioniprivate_mensile` (`insegnante` INT, `anno` INT, `mese` INT, `tipo` INT, `corso` INT, `livello` INT, `lezione` INT, `allievo` INT, `inizio` INT, `fine` INT);

-- -----------------------------------------------------
-- procedure login
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`login`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `login` (in var_username varchar(45), in var_pass varchar(45), out var_role INT)
BEGIN
	declare var_user_role ENUM('amministratore', 'insegnante', 'allievo', 'segreteria');
    
	select `ruolo` from `utente`
		where `username` = var_username
        and `password` = var_pass
        into var_user_role;
        
		if var_user_role = 'amministratore' then
			set var_role = 1;
		elseif var_user_role = 'segreteria' then
			set var_role = 2;
		elseif var_user_role = 'insegnante' then
			set var_role = 3;
		elseif var_user_role = 'allievo' then
			set var_role = 4;
		else
			set var_role = 5;
		end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure iscrivi_allievo
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`iscrivi_allievo`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `iscrivi_allievo` (IN var_username varchar(45), IN var_pass varchar(45), IN var_nome varchar(45), 
										IN var_cogn varchar(45), IN var_tel bigint,
											IN var_dat date, IN var_ind varchar(45), OUT var_matricola int)
BEGIN
	insert into utente(username, `password`, ruolo) values(var_username, var_pass, "allievo");
	insert into allievo(username, nome, cognome, telefono, datanascita, indirizzo)
		values (var_username, var_nome, var_cogn, var_tel, var_dat, var_ind);
    set var_matricola = last_insert_id();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure iscrivi_insegnante
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`iscrivi_insegnante`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `iscrivi_insegnante` (IN var_username varchar(45), IN var_pass varchar(45), IN var_nome varchar(45),
										IN var_ind varchar(45), IN var_naz varchar(45), OUT var_codice int)
BEGIN
	insert into utente(username, `password`, ruolo) values(var_username, var_pass, "insegnante");
	insert into insegnante(username, nome, indirizzo, nazionalita)
		values (var_username, var_nome, var_ind, var_naz);
	set var_codice = last_insert_id();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure crea_attivita
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`crea_attivita`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `crea_attivita` (IN var_inizio timestamp, IN var_fine timestamp, IN var_tipo int,
									IN var_reg varchar(45), IN var_film varchar(45), IN var_arg varchar(45),
                                    IN var_conf varchar(45), OUT var_codice int)
BEGIN
	insert into attivita (inizio, fine, tipo, regista, film, argomento, conferenziere)
		values(var_inizio, var_fine, var_tipo, var_reg, var_film, var_arg, var_conf);
	set var_codice = last_insert_id();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure crea_corso
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`crea_corso`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `crea_corso` (IN var_livello varchar(45), OUT var_codice int)
BEGIN
	declare counter int;
	declare exit handler for sqlexception
    begin
        rollback;  -- rollback any changes made in the transaction
        resignal;  -- raise again the sql exception to the caller
    end;
    set transaction isolation level read committed;
    start transaction;
		select count(*) from livello where nome = var_livello into counter;
        if counter != 1 then
			signal sqlstate '45000' set message_text = "Level doesn't exist";
		end if;
        insert into corso (livello, attivazione) values(var_livello, curdate());
        set var_codice = last_insert_id();
	commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure aggiungi_lezione
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`aggiungi_lezione`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `aggiungi_lezione` (IN var_corso int, IN var_livello varchar(45),
										IN var_inizio timestamp, IN var_fine timestamp, 
											IN var_insegnante int, OUT var_numero int)
BEGIN
	declare count_corso int;
    declare count_ins int;
    declare verif int;
	declare exit handler for sqlexception
    begin
        rollback;  -- rollback any changes made in the transaction
        resignal;  -- raise again the sql exception to the caller
    end;
    set transaction isolation level read committed;
    start transaction;
		select count(*) from corso where codice = var_corso and livello = var_livello into count_corso;
        select count(*) from insegnante where codice = var_insegnante into count_ins;
		call verifica_interferenza_orari(var_insegnante, var_inizio, var_fine, verif);
		if count_corso != 1 then
			signal sqlstate '45000' set message_text = "The course doesn't exist";
		elseif count_ins != 1 then
			signal sqlstate '45000' set message_text = "the teacher doesn't exist";
		elseif verif = 0 then
			signal sqlstate '45001' set message_text = "Time interference with teacher's lessons";
		end if;
        insert into lezione(codicecorso, livellocorso, inizio, fine) values (var_corso, var_livello, var_inizio, var_fine);
        set var_numero = last_insert_id();
        insert into docenza (codicecorso, livellocorso, numerolezione, insegnante) values (var_corso, var_livello, var_numero, var_insegnante);
        set var_numero = last_insert_id();
	commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure iscrivi_allievo_corso
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`iscrivi_allievo_corso`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `iscrivi_allievo_corso` (IN var_corso int, IN var_liv varchar(45), IN var_all int)
BEGIN
	declare counter int;
	declare exit handler for sqlexception
    begin
        rollback;  -- rollback any changes made in the transaction
        resignal;  -- raise again the sql exception to the caller
    end;
    set transaction isolation level read committed;
    start transaction;
		select count(*) from corso where codice = var_corso and livello = var_liv into counter;
		if counter != 1 then
			signal sqlstate '45000' set message_text = "The course doesn't exist";
		end if;
		insert into iscrizione (codicecorso,livellocorso,allievo,iscrizione) values (var_corso, var_liv, var_all, curdate());
	commit;	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure verifica_interferenza_orari
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`verifica_interferenza_orari`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `verifica_interferenza_orari` (IN var_ins int, IN var_inizio timestamp, IN var_fine timestamp, OUT var_out int)
BEGIN
	-- if the output is 0 then the lesson is in opposition with other private or normal teacher's lessons
	declare temp_corso int;
    declare temp_livello varchar(45);
    declare temp_numero int;
	declare temp_inizio timestamp;
    declare temp_fine timestamp;
    declare done int default false;
	declare cur1 cursor for select codicecorso, livellocorso, numerolezione from docenza where insegnante = var_ins;
    declare cur2 cursor for select inizio, fine from lezioneprivata where insegnante = var_ins;
    declare continue handler for not found set done = true;
    
    -- set output to default
    set var_out = 1;
    
    -- verify the interference with normal lessons
	open cur1;
	read_loop: loop
		fetch cur1 into temp_corso, temp_livello, temp_numero;
		if done then
			leave read_loop;
		end if; 
		select inizio, fine from lezione 
			where codicecorso = temp_corso and livellocorso = temp_livello and numero = temp_numero
				into temp_inizio, temp_fine;
			
		if ((var_fine > temp_inizio and var_fine < temp_fine)
			or (var_inizio <= temp_inizio and var_fine >= temp_fine)
			or (var_inizio > temp_inizio and var_inizio < temp_fine))
				then set var_out = 0;
		end if;
	end loop;
	close cur1;
	
    -- verify the interference with private lessons
    set done = false;
	open cur2;
	read_loop: loop
		fetch cur2 into temp_inizio, temp_fine;
		if done then
			leave read_loop;
		end if; 
            
		if ((var_fine > temp_inizio and var_fine < temp_fine)
			or (var_inizio <= temp_inizio and var_fine >= temp_fine)
			or (var_inizio > temp_inizio and var_inizio < temp_fine))
				then set var_out = 0;
		end if;
	end loop;
	close cur2;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure aggiungi_assenza
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`aggiungi_assenza`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `aggiungi_assenza` (IN var_cod int, IN var_liv varchar(45),
										IN var_num int, IN var_all int)
BEGIN
	insert into assenza(codicecorso, livellocorso, numerolezione, allievo) values(var_cod, var_liv, var_num, var_all);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure aggiungi_lezioneprivata
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`aggiungi_lezioneprivata`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `aggiungi_lezioneprivata` (IN var_inizio timestamp, IN var_fine timestamp, In var_ins int, IN var_all int, OUT var_codice int)
BEGIN
	declare verif int;
	declare count_all int;
    declare count_ins int;
	declare exit handler for sqlexception
    begin
        rollback;  -- rollback any changes made in the transaction
        resignal;  -- raise again the sql exception to the caller
    end;
    set transaction isolation level read committed;
    start transaction;
		select count(*) from insegnante where codice = var_ins into count_ins;
	    select count(*) from allievo where matricola = var_all into count_all;
        
        set verif = 1;
        call verifica_interferenza_orari(var_ins, var_inizio, var_fine, verif);
        
        if count_ins != 1 then
			signal sqlstate '45000' set message_text = "The teacher doesn't exist";
		elseif count_all != 1 then 
			signal sqlstate '45000' set message_text = "The student doesn't exist";
		elseif verif = 0 then
			signal sqlstate '45001' set message_text = "Time interference with teacher's lessons";
		end if;
        
        insert into lezioneprivata(inizio, fine, insegnante, allievo) values (var_inizio, var_fine, var_ins, var_all);
        set var_codice = last_insert_id();
	commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure partecipa_attivita
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`partecipa_attivita`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `partecipa_attivita` (IN var_all int, IN var_att int)
BEGIN
	insert into partecipazione(allievo, attivita) values(var_all, var_att);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure report_amministratore
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`report_amministratore`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `report_amministratore` ()
BEGIN
    declare done int default false;
    declare temp_ins int;
    declare cur cursor for select codice from insegnante order by codice;
    declare continue handler for not found set done = true;
	declare exit handler for sqlexception
    begin
        rollback;  -- rollback any changes made in the transaction
        resignal;  -- raise again the sql exception to the caller
    end;
    set transaction isolation level serializable;
    start transaction;
    -- verify the interference with normal lessons
		select * from insegnante order by codice;
		open cur;
		read_loop: loop
			fetch cur into temp_ins;
			if done then
				leave read_loop;
			end if; 
            select anno, mese, tipo, corso, livello, lezione, allievo, inizio, fine from (select * from report_lezioni_mensile
				UNION select * from report_lezioniprivate_mensile) as result
					where insegnante = temp_ins order by insegnante, anno, mese, inizio;
		end loop;
		close cur;
	commit;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure report_insegnante
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`report_insegnante`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `report_insegnante` (IN var_username varchar(45))
BEGIN
	declare temp_ins int;
	declare exit handler for sqlexception
    begin
        rollback;  -- rollback any changes made in the transaction
        resignal;  -- raise again the sql exception to the caller
    end;
    set transaction isolation level serializable;
    start transaction;
    -- verify the interference with normal lessons
		select * from insegnante where username = var_username;
		select codice from insegnante where username = var_username into temp_ins;
		select anno, settimana as sett, tipo, corso, livello, lezione, allievo, inizio, fine from (select * from report_lezioni_settimanale
			UNION select * from report_lezioniprivate_settimanale) as result
				where insegnante = temp_ins order by insegnante, anno, settimana, inizio;
	commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure reset_anno
-- -----------------------------------------------------

USE `gestione-corsi`;
DROP procedure IF EXISTS `gestione-corsi`.`reset_anno`;

DELIMITER $$
USE `gestione-corsi`$$
CREATE PROCEDURE `reset_anno` ()
BEGIN
    set transaction isolation level serializable;
    start transaction;
		DELETE FROM assenza;
		DELETE FROM iscrizione;
		DELETE FROM partecipazione;
		DELETE FROM docenza;
		DELETE FROM lezione;
		DELETE FROM corso;
		DELETE FROM lezioneprivata;
		DELETE FROM attivita;
	commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `gestione-corsi`.`report_lezioni_settimanale`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`report_lezioni_settimanale`;
DROP VIEW IF EXISTS `gestione-corsi`.`report_lezioni_settimanale` ;
USE `gestione-corsi`;
CREATE  OR REPLACE VIEW `report_lezioni_settimanale`AS
	Select D.insegnante as insegnante, year(L.inizio) as anno,
		week(L.inizio) as settimana, "Lezione corso" as tipo, 
		L.codicecorso as corso, L.livellocorso as livello, 
		L.numero as lezione,	NULL as allievo, L.inizio as inizio, L.fine as fine  
	from docenza as D join lezione as L on D.codicecorso = L.codicecorso 
        AND D.livellocorso = L.livellocorso AND D.numerolezione = L.numero
	order by insegnante, anno, settimana, inizio;

-- -----------------------------------------------------
-- View `gestione-corsi`.`report_lezioniprivate_settimanale`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`report_lezioniprivate_settimanale`;
DROP VIEW IF EXISTS `gestione-corsi`.`report_lezioniprivate_settimanale` ;
USE `gestione-corsi`;
CREATE  OR REPLACE VIEW `report_lezioniprivate_settimanale` AS 
	Select LP.insegnante as insegnante, year(LP.inizio) as anno, 
		week(LP.inizio) as settimana, "Lezione privata" as tipo,
		NULL as corso, NULL as livello, NULL as lezione, A.matricola as allievo,
		LP.inizio as inizio, LP.fine as fine 
    from lezioneprivata as LP join allievo as A on LP.allievo = A.matricola
	order by insegnante, anno, settimana, inizio;

-- -----------------------------------------------------
-- View `gestione-corsi`.`report_lezioni_mensile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`report_lezioni_mensile`;
DROP VIEW IF EXISTS `gestione-corsi`.`report_lezioni_mensile` ;
USE `gestione-corsi`;
CREATE  OR REPLACE VIEW `report_lezioni_mensile` AS
	Select D.insegnante as insegnante, year(L.inizio) as anno,
		month(L.inizio) as mese, "Lezione corso" as tipo, 
		L.codicecorso as corso, L.livellocorso as livello, 
		L.numero as lezione,	NULL as allievo, L.inizio as inizio, L.fine as fine  
	from docenza as D join lezione as L on D.codicecorso = L.codicecorso 
        AND D.livellocorso = L.livellocorso AND D.numerolezione = L.numero
	order by insegnante, anno, mese, inizio;

-- -----------------------------------------------------
-- View `gestione-corsi`.`report_lezioniprivate_mensile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestione-corsi`.`report_lezioniprivate_mensile`;
DROP VIEW IF EXISTS `gestione-corsi`.`report_lezioniprivate_mensile` ;
USE `gestione-corsi`;
CREATE  OR REPLACE VIEW `report_lezioniprivate_mensile` AS
	Select LP.insegnante as insegnante, year(LP.inizio) as anno, 
		month(LP.inizio) as mese, "Lezione privata" as tipo,
		NULL as corso, NULL as livello, NULL as lezione, A.matricola as allievo,
		LP.inizio as inizio, LP.fine as fine 
    from lezioneprivata as LP join allievo as A on LP.allievo = A.matricola
	order by insegnante, anno, mese, inizio;
USE `gestione-corsi`;

DELIMITER $$

USE `gestione-corsi`$$
DROP TRIGGER IF EXISTS `gestione-corsi`.`assenza_BEFORE_INSERT` $$
USE `gestione-corsi`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gestione-corsi`.`assenza_BEFORE_INSERT` BEFORE INSERT ON `assenza` FOR EACH ROW
BEGIN
	declare counter int;
	select count(*) from iscrizione where codicecorso = NEW.codicecorso 
											AND livellocorso = NEW.livellocorso AND allievo = NEW.allievo
		into counter;
	if counter = 0 then
		signal sqlstate '45002'  set message_text = "The student is not registered to the course";
    end if;
END$$


DELIMITER ;
SET SQL_MODE = '';
DROP USER IF EXISTS allievo;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'allievo' IDENTIFIED BY 'allievo';

GRANT SELECT ON TABLE `gestione-corsi`.`allievo` TO 'allievo';
SET SQL_MODE = '';
DROP USER IF EXISTS insegnante;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'insegnante' IDENTIFIED BY 'insegnante';

GRANT EXECUTE ON procedure `gestione-corsi`.`report_insegnante` TO 'insegnante';
SET SQL_MODE = '';
DROP USER IF EXISTS segreteria;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'segreteria' IDENTIFIED BY 'segreteria';

GRANT EXECUTE ON procedure `gestione-corsi`.`iscrivi_allievo_corso` TO 'segreteria';
GRANT EXECUTE ON procedure `gestione-corsi`.`aggiungi_assenza` TO 'segreteria';
GRANT EXECUTE ON procedure `gestione-corsi`.`partecipa_attivita` TO 'segreteria';
GRANT EXECUTE ON procedure `gestione-corsi`.`report_insegnante` TO 'segreteria';
GRANT EXECUTE ON procedure `gestione-corsi`.`verifica_interferenza_orari` TO 'segreteria';
GRANT SELECT ON TABLE `gestione-corsi`.`corso` TO 'segreteria';
GRANT SELECT ON TABLE `gestione-corsi`.`allievo` TO 'segreteria';
GRANT SELECT ON TABLE `gestione-corsi`.`lezione` TO 'segreteria';
GRANT SELECT ON TABLE `gestione-corsi`.`attivita` TO 'segreteria';
SET SQL_MODE = '';
DROP USER IF EXISTS amministratore;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'amministratore' IDENTIFIED BY 'amministratore';

GRANT EXECUTE ON procedure `gestione-corsi`.`aggiungi_lezione` TO 'amministratore';
GRANT EXECUTE ON procedure `gestione-corsi`.`crea_attivita` TO 'amministratore';
GRANT EXECUTE ON procedure `gestione-corsi`.`crea_corso` TO 'amministratore';
GRANT EXECUTE ON procedure `gestione-corsi`.`iscrivi_allievo` TO 'amministratore';
GRANT EXECUTE ON procedure `gestione-corsi`.`iscrivi_insegnante` TO 'amministratore';
GRANT EXECUTE ON procedure `gestione-corsi`.`verifica_interferenza_orari` TO 'amministratore';
GRANT EXECUTE ON procedure `gestione-corsi`.`report_amministratore` TO 'amministratore';
GRANT EXECUTE ON procedure `gestione-corsi`.`aggiungi_lezioneprivata` TO 'amministratore';
GRANT EXECUTE ON procedure `gestione-corsi`.`reset_anno` TO 'amministratore';
GRANT SELECT ON TABLE `gestione-corsi`.`corso` TO 'amministratore';
GRANT SELECT ON TABLE `gestione-corsi`.`lezione` TO 'amministratore';
GRANT SELECT ON TABLE `gestione-corsi`.`attivita` TO 'amministratore';
GRANT SELECT ON TABLE `gestione-corsi`.`insegnante` TO 'amministratore';
GRANT SELECT ON TABLE `gestione-corsi`.`livello` TO 'amministratore';
GRANT SELECT ON TABLE `gestione-corsi`.`allievo` TO 'amministratore';
SET SQL_MODE = '';
DROP USER IF EXISTS login;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'login' IDENTIFIED BY 'login';

GRANT EXECUTE ON procedure `gestione-corsi`.`login` TO 'login';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `gestione-corsi`.`livello`
-- -----------------------------------------------------
START TRANSACTION;
USE `gestione-corsi`;
INSERT INTO `gestione-corsi`.`livello` (`nome`, `libro`, `esame`) VALUES ('Elementary', 'The basic book by Sam Thomas', 0);
INSERT INTO `gestione-corsi`.`livello` (`nome`, `libro`, `esame`) VALUES ('Intermediate', 'Try again by Sam Mai', 0);
INSERT INTO `gestione-corsi`.`livello` (`nome`, `libro`, `esame`) VALUES ('First certificate', 'Listem to me by Sam Aforo', 1);
INSERT INTO `gestione-corsi`.`livello` (`nome`, `libro`, `esame`) VALUES ('Advanced', 'The pen is on the table By Sam', 1);
INSERT INTO `gestione-corsi`.`livello` (`nome`, `libro`, `esame`) VALUES ('Proficiency', 'English cat by Sam Ipensi', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `gestione-corsi`.`corso`
-- -----------------------------------------------------
START TRANSACTION;
USE `gestione-corsi`;
INSERT INTO `gestione-corsi`.`corso` (`codice`, `livello`, `attivazione`) VALUES (1, 'Elementary', '2020-06-01 18:00:00');
INSERT INTO `gestione-corsi`.`corso` (`codice`, `livello`, `attivazione`) VALUES (2, 'Advanced', '2020-07-21 8:00:00');
INSERT INTO `gestione-corsi`.`corso` (`codice`, `livello`, `attivazione`) VALUES (3, 'First certificate', '2019-02-21 10:00:00');
INSERT INTO `gestione-corsi`.`corso` (`codice`, `livello`, `attivazione`) VALUES (4, 'Advanced ', '2018-03-10 14:00:00');

COMMIT;


-- -----------------------------------------------------
-- Data for table `gestione-corsi`.`lezione`
-- -----------------------------------------------------
START TRANSACTION;
USE `gestione-corsi`;
INSERT INTO `gestione-corsi`.`lezione` (`codicecorso`, `livellocorso`, `numero`, `inizio`, `fine`) VALUES (1, 'Elementary', 1, '2020/06/09 14:00:00', '2020/06/09 16:00:00');
INSERT INTO `gestione-corsi`.`lezione` (`codicecorso`, `livellocorso`, `numero`, `inizio`, `fine`) VALUES (1, 'Elementary', 2, '2020/06/11 09:30:00', '2020/06/11 11:30:00');
INSERT INTO `gestione-corsi`.`lezione` (`codicecorso`, `livellocorso`, `numero`, `inizio`, `fine`) VALUES (4, 'Advanced', 1, '2020/06/20 14:00:00', '2020/06/20 18:15:00');
INSERT INTO `gestione-corsi`.`lezione` (`codicecorso`, `livellocorso`, `numero`, `inizio`, `fine`) VALUES (3, 'First certificate', 1, '2020/05/19 15:15:00', '2020/05/19 17:45:00');

COMMIT;


-- -----------------------------------------------------
-- Data for table `gestione-corsi`.`utente`
-- -----------------------------------------------------
START TRANSACTION;
USE `gestione-corsi`;
INSERT INTO `gestione-corsi`.`utente` (`username`, `password`, `ruolo`) VALUES ('stefano', 'pass', 'allievo');
INSERT INTO `gestione-corsi`.`utente` (`username`, `password`, `ruolo`) VALUES ('lopresti', 'pass', 'insegnante');
INSERT INTO `gestione-corsi`.`utente` (`username`, `password`, `ruolo`) VALUES ('admin', 'pass', 'amministratore');
INSERT INTO `gestione-corsi`.`utente` (`username`, `password`, `ruolo`) VALUES ('segreteria', 'pass', 'segreteria');
INSERT INTO `gestione-corsi`.`utente` (`username`, `password`, `ruolo`) VALUES ('pellegrini', 'pass', 'insegnante');
INSERT INTO `gestione-corsi`.`utente` (`username`, `password`, `ruolo`) VALUES ('pippo', 'pass', 'allievo');

COMMIT;


-- -----------------------------------------------------
-- Data for table `gestione-corsi`.`allievo`
-- -----------------------------------------------------
START TRANSACTION;
USE `gestione-corsi`;
INSERT INTO `gestione-corsi`.`allievo` (`matricola`, `username`, `nome`, `cognome`, `telefono`, `datanascita`, `indirizzo`) VALUES (1, 'stefano', 'stefano', 'costanzo', 3342235088, '1997-02-09', 'viale Alberto Sordi');
INSERT INTO `gestione-corsi`.`allievo` (`matricola`, `username`, `nome`, `cognome`, `telefono`, `datanascita`, `indirizzo`) VALUES (2, 'pippo', 'giuseppe', 'rossi', 3394885564, '2001-03-16', 'via Checco');

COMMIT;


-- -----------------------------------------------------
-- Data for table `gestione-corsi`.`insegnante`
-- -----------------------------------------------------
START TRANSACTION;
USE `gestione-corsi`;
INSERT INTO `gestione-corsi`.`insegnante` (`codice`, `username`, `nome`, `indirizzo`, `nazionalita`) VALUES (1, 'lopresti', 'francesco', 'via Cavour', 'Italia');
INSERT INTO `gestione-corsi`.`insegnante` (`codice`, `username`, `nome`, `indirizzo`, `nazionalita`) VALUES (2, 'pellegrini', 'alessandro', 'via Alessandro Florenzi', 'Italia');

COMMIT;


-- -----------------------------------------------------
-- Data for table `gestione-corsi`.`docenza`
-- -----------------------------------------------------
START TRANSACTION;
USE `gestione-corsi`;
INSERT INTO `gestione-corsi`.`docenza` (`codicecorso`, `livellocorso`, `numerolezione`, `insegnante`) VALUES (1, 'Elementary', 1, 1);
INSERT INTO `gestione-corsi`.`docenza` (`codicecorso`, `livellocorso`, `numerolezione`, `insegnante`) VALUES (4, 'Advanced', 1, 1);
INSERT INTO `gestione-corsi`.`docenza` (`codicecorso`, `livellocorso`, `numerolezione`, `insegnante`) VALUES (3, 'First Certificate', 1, 1);
INSERT INTO `gestione-corsi`.`docenza` (`codicecorso`, `livellocorso`, `numerolezione`, `insegnante`) VALUES (1, 'Elementary', 2, 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `gestione-corsi`.`lezioneprivata`
-- -----------------------------------------------------
START TRANSACTION;
USE `gestione-corsi`;
INSERT INTO `gestione-corsi`.`lezioneprivata` (`codice`, `inizio`, `fine`, `insegnante`, `allievo`) VALUES (1, '2020/04/10 14:00:00', '2020/04/10 17:00:00', 1, 1);
INSERT INTO `gestione-corsi`.`lezioneprivata` (`codice`, `inizio`, `fine`, `insegnante`, `allievo`) VALUES (2, '2020/06/19 10:00:00', '2020/06/19 11:45:00', 1, 2);
INSERT INTO `gestione-corsi`.`lezioneprivata` (`codice`, `inizio`, `fine`, `insegnante`, `allievo`) VALUES (3, '2020/07/02 18:30:00', '2020/07/02 20:00:00', 2, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `gestione-corsi`.`attivita`
-- -----------------------------------------------------
START TRANSACTION;
USE `gestione-corsi`;
INSERT INTO `gestione-corsi`.`attivita` (`codice`, `inizio`, `fine`, `tipo`, `regista`, `film`, `argomento`, `conferenziere`) VALUES (1, '2020/10/04 11:00:00', '2020/10/04 12:30:00', 1, 'Tarantino', 'Pulp fiction', '/', '/');

COMMIT;

